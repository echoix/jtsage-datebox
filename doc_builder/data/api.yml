const:
  mode_date: &modeDate
   - datebox
   - datetimebox
   - flipbox
   - datetimeflipbox
   - slidebox
   - calbox

  mode_time: &modeTime
   - timebox
   - datetimeflipbox
   - timeflipbox
   - datetimeflipbox

  mode_all: &modeAll
   - datebox
   - timebox
   - datetimeflipbox
   - flipbox
   - timeflipbox
   - datetimeflipbox
   - slidebox
   - calbox

  i18n: &i18n |
    ##### This is a internationalization / localization option!

    i18n options can not be set directly on a per-instance basis, you must include the "override" directive, and properly camel case the new name (see below)

    The default presented here is the default for the internationalized english translation provided with DateBox.  Loading a different translation file will automatically override that default with a new one.

    For more information, please take a look at the _Localizing Datebox_ section of the documentation.


opts : 
  afterToday :
    short   : Selected date must be after today
    long    : |
      Dates selected must be after today's real date, or, all dates prior to today's date are invalid.

      _This is based on the first open of the widget - should a page be opened very close to midnight, an off-by one error might appear._
    type    : Boolean
    modes   : *modeDate
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : false

  beforeOpenCallbackArgs :
    short   : Extra arguments to pass to open callback.
    modes   : *modeAll
    cat     : Callback
    default : "[]"
    type    : Array
    dynamic : true
    long    : |
      Note that 'this' in your function is the widget.  argument[0] is a return value 
      object, this starts on argument[1]
    optdemo : false
    sample  : false

  beforeOpenCallback :
    short   : Callback function to run on control open
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : Function
    dynamic : true
    long    : |
      Option can be a function, or, a string reference to a function in the window 
      object.  Function is run on press of the open button ( or call to open DateBox)

      Returning false from this function will prevent DateBox from opening.
    optdemo : false
    sample  : false

  beforeToday :
    short   : Selected date must be before today
    long    : |
      Dates selected must be before today's real date, or, all dates after to today's date are invalid.

      _This is based on the first open of the widget - should a page be opened very close to midnight, an off-by one error might appear._
    type    : Boolean
    modes   : *modeDate
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : false

  blackDates :
    short   : Dates to be considered invalid
    long    : |
      A list (array) of ISO-8601 _(YYYY-MM-DD)_ dates that are to be considered invalid.

      Processing order:
       * enableDates ( If used, the list is exclusive )
       * whiteDates ( Whitelisted dates will always pass )
       * All date limiters, in a pile-on fashion

      ##### Example
      ```js
      // Christmas and New Years, 2000/2001
      ["2001-01-01", "2000-12-31", "2000-12-25", "2000-12-24"]
      ```
    type    : Array
    modes   : *modeDate
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : "[\"2001-01-01\", \"2000-12-31\", \"2000-12-25\", \"2000-12-24\"]"

  blackDatesRec :
    short   : Recurring dates to be considered invalid
    long    : |
      A list of recurring dates that are to be consided invalid.

      Each date element is an array of the format

      ```js
      [<year>, <month>, <date>]
      ```

      * *year* : 4 digit year
      * *month* : 0 based month, (0 = January ... 11= December )
      * *date* : date

      Additionally, using "-1" as an element treats it as a wildcard, that is "every year/month/day"

      Processing order:
       * enableDates ( If used, the list is exclusive )
       * whiteDates ( Whitelisted dates will always pass )
       * All date limiters, in a pile-on fashion

      ##### Example

      ```js
      // (Chrismas, Christmas Eve, New Years Eve, and New Years Day, Every Year)
      [ [-1,0,1], [-1,11,31], [-1,11,25], [-1,11,24] ]
      ```
    type    : Array
    modes   : *modeDate
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : "[ [-1,0,1], [-1,11,31], [-1,11,25], [-1,11,24] ]"

  blackDatesPeriod :
    short   : Dates to blacklist - periodic
    long    : |
      A list of periodic dates to blacklist.

      Takes an array of the format

      ```js
      [<start date>, <period>]
      ```

      * *date* : ISO-8601 start date
      * *period* : integer, i.e 7 (weekly), 14 (bi-monthly)

      ##### Example

      ```js
      // (Every other wednesday)
      [ "2019-09-11", 14 ]
      ```
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ \"2019-09-11\", 14 ]"

  blackDays :
    short   : Days of the week to be considered invalid
    long    : |
      A list (array) of days of the week that are to be considered invalid. Zero based ( 0 = Sunday ... 6 = Saturday )

      Processing order:
       * enableDates ( If used, the list is exclusive )
       * whiteDates ( Whitelisted dates will always pass )
       * All date limiters, in a pile-on fashion

      ##### Example
      ```js
      // Weekends
      [ 0, 6 ]
      ```
    type    : Array
    modes   : *modeDate
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : "[ 0, 6 ]"

  breakpointWidth :
    short   : Window width breakpoint
    long    : Window width below which the control should stretch to fill the screen
    modes   : *modeAll
    cat     : Display-Control
    type    : String
    dynamic : false
    default : 567px
    optdemo : false
    sample  : false

  buttonIcon :
    short   : Icon class to use for button attached to original input (override)
    long    : |
      The class to be forcibly (overridden) passed to _styleFunctions.baseInputButton()

      <div class="text-danger">
      This is an override only class, and should only be used when a single DateBox on a site needs a unique icon for some reason.
      </div>
    type    : String
    modes   : *modeAll
    default : false
    dynamic : false
    cat     : Theme
    optdemo : false
    sample  : false

  calBeforeAppendFunc :
    short   : Function to run before appending calendar grid date
    long    : |
      This option allows you to define a custom function that is called on the generated calbox grid box of each date.

      It provides an object, and expects an object in the same format.

      The object provided:

      ```js
      {
        // boolean ( true = date is invalid )
        bad: false,

        // javaScript date object for the date
        dateObj: [Object],

        // Text to display, typically just the number
        displayText: 6,

        // Object that click events run on.  Part of htmlObj
        eventObj: [Object],

        // If the date is invalid, set to the name of the rule that caused it
        failrule: false,

        // boolean ( true = date is valid )
        good: true,

        // jQuery object to be appended.
        htmlObj: [Object],

        // boolean ( false = Date is not part of the displayed month ( underrun / overrun ) )
        inBounds: false,

        // If the date is explicitly valid, set to the name of the rule that caused it
        passrule: false,

        // Theme to be applied to the htmlObj (already applied)
        theme: "outline-secondary border-0"
      }
      ```

      Example function:

      ```js
      window.printFullDate = function( myObject ) {
        console.log( myObject.dateObj );
        return myObject;
      }
      ```

      Then, to link it to datebox, it could be as easy as:

      ```html
      <input type="text" data-role="datebox" data-datebox-mode="calbox" data-datebox-calBeforeAppendFunc="printFullData">
      ```

      When given a function, DateBox will run it.  When given a string, it will run window.stringContents

      <h5 class="text-danger">Requirement</h5>

      There must be an element with the ".dbEvent" class, this is how clicks are triggered.  Additionally, that element should
      include the full object as it's $.data()

      Note that the context of this function is the widget, same as for calFormatter.

    type    : String || Function
    modes   : 
      - calbox
    default : false
    dynamic : true
    cat     : Callback
    optdemo : false
    sample  : false

  calDateList :
    short   : List of dates for special pick list
    long    : |
      List of 2-element arrays to show in a special pick list. Used with ___calShowDateList___.

      The inner array structure is:

      ```js
      [ISO-Date, Description]
      ```

      ##### Example

      ```js
      [ ["1980-04-25", "JT's Date of Birth"], ["1809-02-12", "Lincoln's Birthday"] ]
      ```
    type    : Array
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : "[ [\"1980-04-25\", \"JT's Date of Birth\"], [\"1809-02-12\", \"Lincoln's Birthday\"] ]"

  calDateListLabel :
    short   : Header text for calDateList
    long    : |
      The header text for the ___calDateList___ special pick list.
    type    : String
    modes   :
      - calbox
    default : Other Dates
    dynamic : true
    cat     : i18n
    i18n : *i18n
    overrideName : overrideCalDatListLabel
    optdemo : false
    sample  : false

  calFormatter :
    short   : Control formatting of the date text
    long    : |
      This option allows for a function that should return the prefered text for the calendar grid date. Typically, it's just a number.

      An object is passed to the function:
      
      ```js
      {
        // the theme class to be applied to the date
        theme    : [String]

        // The date is in the current month displayed.
        inBounds : [boolean]

        // True if the date is valid
        good     : [boolean],

        // True if the date is invalid
        bad      : [boolean],

        // Set to the rule that failed the date, or false
        failrule : [boolean|String],

        // Set to the rule that passed the date, or false.
        // Note: both failrule and passrule may be empty if the date passed by default (not explicitly)
        passrule : [boolean|String],

        // The current date being processed.
        dateObj  : [JavaScript Date Object]
      }
      ```

      The return value must be a string, but can contain HTML. For advanced formatting, consider using _calBeforeAppendFunc_ instead.

      Example function:

      ```js
      window.redSingles = function( obj ) {
        // Make single digit dates red
        if ( obj.dateObj.get(2) < 10 ) {
          return "<span style='color:red'>" + obj.dateObj.get(2) + "</span>";
        } else {
          return obj.dateObj.get(2);
        }
      }
      ```

      Then, to link it to datebox, it could be as easy as:

      ```html
      <input type="text" data-role="datebox" data-datebox-mode="calbox" data-datebox-calFormatter="redSingles">
      ```

      When given a function, DateBox will run it.  When given a string, it will run window.stringContents

      Note that this function is run with a context of the widget.  So you may call things like:

      ```js
      if ( this.isSelectedInCalGrid() ) { ... }
      ```

      Rather than having to go back to the DOM element.
    type    : Function
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Callback
    optdemo : false
    sample  : false

  calHeaderFormat :
    short   : Header format for calendar mode
    long    : |
      This is a parsed format for the header (if shown) in CalBox and SlideBox

      For more information on date format variables, see the _Output Formats_ section of the documentation
    type    : String
    modes   :
      - calbox
      - slidebox
    default : "%B %Y"
    dynamic : true
    cat     : i18n
    i18n : *i18n
    overrideName : overrideCalHeaderFormat
    optdemo : false
    sample  : false

  calHighOutOfBounds :
    short   : Highlight dates from other months
    long    : |
      Highlight the dates that are not part of the displayed month with the theme in ___theme.cal_OutOfBounds___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  calHighPick :
    short   : Highlight currently selected date
    long    : |
      Highlight the currently selected date with the theme in ___theme\_cal_Selected___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  calHighToday :
    short   : Highlight today's date
    long    : |
      Highlight today's date with the theme in ___theme.cal_Today___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  calHighSelected :
    short   : Highlight selected date
    long    : |
      Highlight selected date with the theme in ___theme.cal_Selected___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  calSelectedOutOfBounds :
    short   : Highlight selected date even if it's out of bounds
    long    : |
      Highlight selected date (if out of bounds) with the theme in ___theme.cal_Selected___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  calNoHeader :
    short   : Suppress standard control header
    long    : |
      This option allows hiding of the standard calendar header (Month & Year, Previous / Next Buttons)

      It is particularly useful when you want to replace it with ___calUsePickers___
    type    : Boolean
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calOnlyMonth :
    short   : Show only the current month
    long    : |
      This option allows the hiding of the underrun / overrun dates from the previous and next month.
    type    : Boolean
    modes   : 
      - calbox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calShowDateList :
    short   : Show special date picker
    long    : |
      This is the on/off switch for the display of dates provided by ___calDateList___
    type    : Boolean
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calShowDays :
    short   : Show day labels
    long    : |
      This is the on/off switch for day of the week labels (Short labels)
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calShowWeek :
    short   : Show week numbers
    long    : |
      This is the on/off switch for ISO-8601 week numbers
    type    : Boolean
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calStartDay :
    short   : Start day of week
    long    : |
      Zero based start of the week. Tested heavily with 0 (Sunday) and 1 (Monday). ISO-8601 Week numbers are based on the first day displayed, so become meaningless with odd selections.
    type    : Boolean
    modes   :
      - calbox
    default : 0
    dynamic : true
    cat     : i18n
    i18n : *i18n
    overrideName : overrideCalStartDay
    optdemo : false
    sample  : false

  calUsePickers :
    short   : Show month and year select boxes
    long    : |
      Show a month and year select box above the calendar grid.  Often used with ___calNoHeader___
    type    : Boolean
    modes   :
      - calbox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calYearPickMax :
    short   : Year picker upper limit
    long    : |
      This is the upper limit for the year select box.

      Special cases:
       * __Integer > 1,800__ : Hard coded year
       * __Integer < 1,800__ : Number of years from current year or current selection.
       * __String "NOW"__ : Today's year

      See also: ___calYearPickRelative___
    type    : Integer || String
    modes   :
      - calbox
    default : 6
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calYearPickMin :
    short   : Year picker lower limit
    long    : |
      This is the lower limit for the year select box.

      Special cases:
       * __Integer > 1,800__ : Hard coded year
       * __Integer < 1,800__ : Number of years from current year or current selection.
       * __String "NOW"__ : Today's year

      See also: ___calYearPickRelative___
    type    : Integer || String
    modes   :
      - calbox
    default : -6
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  calYearPickRelative :
    short   : Year picker relativity switch
    long    : |
      When true, the year picker min/max are relative to the currently visible date

      When false, the year picker min/max are relative to today's year
    type    : Boolean
    modes   :
      - calbox
    default : true
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  clearButton :
    short   : Button Label - clear button
    long    : The text label for the clear button
    type    : String
    modes   : *modeAll
    default : Clear
    dynamic : true
    cat     : i18n
    i18n : *i18n
    overrideName : overrideClearButton
    optdemo : false
    sample  : false

  clickEvent :
    short   : Listener for all clickable buttons
    long    : Almost always click now.  Older mobile implementations may require others.
    type    : String
    modes   : *modeAll
    default : click
    dynamic : false
    cat     : Operation
    optdemo : false
    sample  : false

  closeCallback :
    short   : Callback function to run on control close
    long    : |
      Option can be a function, or, a string reference to a function in the window object.

      The first argument to the function will be an object containing: 
      
       - __date__ : The JavaScript date object of the current (chosen) date - Always defined, even if meaningless.
       - __initDate__ : The JavaScript date object that holds the widget creation time/date. Always defined.
       - __duration__ : The last entered duration, in seconds for duration modes - undefined if not.
       - __cancelClose__ : [Close only] - If the close action was triggered by a user cancel (true), or by setting the date (false)

      For more information, please see the _Callbacks and Listeners_ section of the documentation.
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : Function
    dynamic : true
    optdemo : false
    sample  : false

  closeCallbackArgs :
    short   : Extra arguments to pass to close callback.
    long    : |
      Note that 'this' in your function is the widget.  argument[0] is a return value object, this starts on argument[1]

      For more information, please see the  _Callbacks and Listeners_ section of the documentation.
    modes   : *modeAll
    cat     : Callback
    default : []
    type    : Array
    dynamic : true
    optdemo : false
    sample  : false

  closeTodayButton :
    short   : Today button also closes DateBox
    long    : |
      This will cause the button that selects "today" to also close the control.
    modes   : *modeAll
    cat     : Operation
    default : false
    type    : Boolean
    dynamic : true
    optdemo : false
    sample  : false

  closeTomorrowButton :
    short   : Tomorrow button also closes DateBox
    long    : |
      This will cause the button that selects "tomorrow" to also close the control.
    modes   : *modeAll
    cat     : Operation
    default : false
    type    : Boolean
    dynamic : true
    optdemo : false
    sample  : false

  controlWidth :
    short   : Width of the control
    long    : Preferred width of the control. See also ___breakpointWidth___
    modes   : *modeAll
    cat     : Display-Control
    type    : String
    dynamic : false
    default : 290px
    optdemo : false
    sample  : false

  controlWidthImp :
    short   : Force the Width of the control
    long    : Added to the style block in the head.  " !important", if nessesary for the framework
    modes   : *modeAll
    cat     : Display-Control
    type    : String
    dynamic : false
    default : ""
    optdemo : false
    sample  : false

  dateFieldOrder :
    short   : Field order for date entry
    long    : |
      Capitalizing "M" for month in "datebox" mode will enable string representations (short months) instead.

      Note that this will break for any locale where the short string of two months is identical.
    modes   : *modeAll
    cat     : i18n
    default : "[ 'm', 'd', 'y' ]"
    type    : Array
    i18n : *i18n
    overrideName : overrideDateFieldOrder
    optdemo : false
    sample  : false

  dateFormat :
    short   : Format for returned date
    long    : |
      For more information on date format variables, see the _Date Formats_ documentation section.
    modes   : *modeAll
    cat     : i18n
    default : "%Y-%m-%d"
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideDateFormat
    optdemo : false
    sample  : false

  datetimeFieldOrder :
    short   : Field order for datetime entry
    long    : |
      Capitalizing "M" for month in "datebox" mode will enable string representations (short months) instead.

      Note that this will break for any locale where the short string of two months is identical.
    modes   : *modeAll
    cat     : i18n
    default : "[ 'y', 'm', 'd', 'h', 'i', 's', 'a' ]"
    type    : Array
    i18n : *i18n
    overrideName : overrideDatetimeFieldOrder
    optdemo : false
    sample  : false

  datetimeFormat :
    short   : Format for returned datetime
    long    : |
      For more information on date and time format variables, see the _Date Formats_ documentation section.

      Typically, this type of return isn't based on locale, more on the format your backend is expecting.  It appears in the i18n settings for ease of site-specific i18n customization.
    modes   : *modeAll
    cat     : i18n
    default : "%Y-%m-%dT%k:%M:%S"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDatetimeFormat
    optdemo : false
    sample  : false

  daysOfWeek :
    short   : Days of the week
    long    : Days of the week, in an array, full text
    modes   : *modeAll
    cat     : i18n
    default : "['Sunday' ... 'Saturday']"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDaysOfWeek
    optdemo : false
    sample  : false

  daysOfWeekShort :
    short   : Abbreviated days of the week
    long    : |
      Days of the week, in an array, shortened text

      Note that if you are relying on short day names to read a date back in (very rare, as there is
      almost always a more granular option available), and there are duplicates in this list (i.e.
      array('S,'M','T','W','T'...) ) the parser will likely behave very strangely.
    modes   : *modeAll
    cat     : i18n
    default : "['Su' ... 'Sa']"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDaysOfWeekShort
    optdemo : false
    sample  : false

  defaultValue :
    short   : Default value for the date
    long    : |
      Set the default date value, or time value.  Many options exist for supplying the date:

      ##### Date Modes:

      ```js
      defaultValue: new Date(2001,0,1,0,0,0,0); // Date Object (Jan 1, 2001)
      defaultValue: [2001,0,1];   // Array (Jan 1, 2001)
      defaultValue: "2001-01-01"; // ISO Date String (Jan 1, 2001)
      defaultValue: "+86400";     // Offset (+ or -) a number of SECONDS from today (86400 == 1 day)
      defaultValue: 978307200;    // Number (Epoch) (Jan 1, 2001 GMT !SEE NOTE1!)
      ```

      ##### Time Modes:

      ```js
      defaultValue: new Date(2001,0,1,15,30,0,0); // Date Object (3:30:00 PM)
      defaultValue: [15,30,0];  // Array (3:30:00 PM)
      defaultValue: "15:30";    // String (3:30:00 PM)
      defaultValue: "15:30:00"; // String with Seconds (3:30:00 PM)
      defaultValue: "+86400";   // Offset (+ or -) a number of SECONDS from today (86400 == 1 day)
      defaultValue: 55800;      // Number (Epoch) (3:30:00 PM GMT, !SEE NOTE1!)
      ```

      ##### Duration Modes:

      ```js
      defaultValue: 3600; // Number of seconds (60 Minutes)
      ```

      #### Note 0: Be Specific!

      When choosing a format to use, be as specific as your data will allow you to be.  A Date object is a date object - it's inturpreted on the client maching, and it will be "right".  Failing that, the array constructor just passes those values on to a new Date().  Use the string constructor as a last resort - even a simple typo in the string format will cause the defaultValue parser to fail, which drops the defaultValue === Today's Date, NOW().

      #### Note 1: Don't Use Epoch!

      A small note about epoch - great pains have been made to make DateBox rather timezone agnostic.  It *rarely* has to care, and when it does, it tends to fail pretty much silently. (a/n: This really only crops up for people who observe DST, and then, it will only show up in time modes, or duration modes if you are working with large numbers).  That said, if you supply epoch, it is *not* based on UTC, but the local timezone. If you have already done the math serverside, great.  If not, and you absolutly must store your dates this way, a good way to convert back is:

      ```js
      myDate = new Date();
      myDate.setUTCSeconds( epoch );
      ```

      #### Note 2: Re-using defaultValue

      ___defaultValue___ is only read when the input element is *empty*.  If you need to change the date, ___setTheDate()___ is much more effective.

    modes   : *modeAll
    cat     : Operation
    default : false
    type    : Array | String
    dynamic : false
    optdemo : false
    sample  : false

  disableWheel :
    short   : Disable mousewheel events
    long    : Set to true to not bind the to the mousewheel
    modes   : *modeAll
    cat     : Operation
    default : false
    type    : Boolean
    dynamic : true
    optdemo : false
    sample  : false

  disabledState :
    short   : Disabled Class
    long    : Class to add to disabled buttons
    modes   : *modeAll
    cat     : Theme
    default : "disabled"
    type    : String
    dynamic : true
    optdemo : true
    sample  : false

  displayMode :
    short   : Open method to use
    long    : |
      The opening method to use to display the control

       * dropdown
           * Display the control as a popover attached to the input (default)
       * inline
           * Display the control inline in the page, under the input, always visible
       * blind
           * Display the control inline in the page, under the input, sliding up and down
       * modal
           * Display the control in a full window modal
    modes   : *modeAll
    cat     : Display-Control
    type    : String
    dynamic : true
    default : dropdown
    optdemo : false
    sample  : false

  displayDropdownPosition :
    short   : Position of dropdown method open
    long    : |
      String directing placement of dropdown.

      Options: topLeft, topMiddle, topRight, centerLeft, centerMiddle, centerRight,
               bottomLeft, bottomMiddle, bottomRight

      Where the first term is vertical, the second is horizontal.
    modes   : *modeAll
    cat     : Display-Control
    type    : String
    dynamic : true
    default : bottomRight
    optdemo : false
    sample  : false

  displayInlinePosition :
    short   : Position of inline method open
    long    : |
      String directing placement of inline control.

      One of left, right, or center
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : center
    optdemo : false
    sample  : false

  displayForcePosition :
    short   : Force position of modal or dropdown
    long    : |
      Takes an array of [ top, left ], expected in px, or any value that the jQuery .css() function
      will accept.
    modes   : *modeAll
    cat     : Theme
    type    : Array
    dynamic : true
    default : false
    optdemo : false
    sample  : false

  dismissOutsideClick :
    short   : Clicking outside the control will close it
    long    : |
      When true, clicking on the greyed out background around the control will close it.  Applies
      to modal and dropdown display methods only.
    modes   : *modeAll
    cat     : Display-Control
    type    : Boolean
    dynamic : true
    default : true
    optdemo : false
    sample  : false

  dismissOnEscape :
    short   : Pressing escape will close the control
    long    : |
      When true, pressing the escape while a control is open will close it.  Applies
      to modal and dropdown display methods only.
    modes   : *modeAll
    cat     : Display-Control
    type    : Boolean
    dynamic : true
    default : true
    optdemo : false
    sample  : false

  durationDays :
    short   : Name of day/days for duration
    long    : |
      Pluralization of Day/Days. (1 Day, 2 Days).

      Very simplistic, for instance, there is no support for 0 Days. 
      Nor any other cases in different locales that don't follow the english method of pluralization.
    modes   : *modeAll
    cat     : i18n
    default : "['Day', 'Days']"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDurationDays
    optdemo : false
    sample  : false

  durationFormat :
    short   : Format for returned duration
    long    : For more information on date and time format variables, see the _Date Formats_ documentation section.
    modes   : *modeAll
    cat     : i18n
    default : "%Dd %DA, %Dl:%DM:%DS"
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideDurationFormat
    optdemo : false
    sample  : false

  durationLabel :
    short   : Labels for duration elements
    long    : Array of labels for the duration inputs - Days, Hours, Minutes, Seconds
    modes   : *modeAll
    cat     : i18n
    default : "[ 'Days', 'Hours', 'Minutes', 'Seconds' ]"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDurationLabel
    optdemo : false
    sample  : false

  durationOrder :
    short   : Field order for duration entry
    long    : |
      Controls which order the duration elements appear in, and if they appear at all.

      Note: if you omit elements, be sure to change ___durationFormat___ or you may get odd results

       - __d__ : Days
       - __h__ : Hours
       - __i__ : Minutes
       - __s__ : Seconds
    modes   : *modeAll
    cat     : i18n
    default : "[ 'd', 'h', 'i', 's' ]"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideDurationOrder
    optdemo : false
    sample  : false

  durationStep :
    short   : Stepper for duration mode (single)
    long    : |
      This will set the stepper for the *most* precise time measurement shown in your
      duration control.  By default, this is seconds - however, if you play with 
      ___durationFieldOrder___, it could be any field up to and including days.

      Example:

      ```js
      overrideDurationFieldOrder = ['d','h'];
      durationStep = 2;
      ```

      In this case, "hours" would be stepped (by 2 hours), as it is the least precise element shown.
    modes   : *modeAll
    cat     : Operation
    default : 1
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  enableDates :
    short   : Exclusive list of valid dates
    long    : |
      Array of ISO-8601 (YYYY-MM-DD) dates that are exclusively valid and all others should be 
      disabled. If this is in use, no other date checks are performed.

      Processing order:

       * enableDates ( If used, the list is exclusive )
       * whiteDates ( Whitelisted dates will always pass )
       * All date limiters, in a pile-on fashion


      ##### Example

      ```js
      // Christmas, Christmas Eve, and New Years Eve of 2000 exclusively
      [ "2000-12-31", "2000-12-25", "2000-12-24" ]
      ```
    modes   : *modeAll
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ \"2000-12-31\", \"2000-12-25\", \"2000-12-24\" ]"

  flen :
    short   : Height of rollers
    long    : |
      This is the half the number of elements in the flip roller

      Full size = ( <number> * 2 ) + 1

      Defaults should be fine on most screens, unless maybe you are setting up an oddly proportioned
      kiosk or something.
    modes   : 
      - flipbox
      - timeflipbox
      - datetimeflipbox
    cat     : Operation
    default : "{ 'y': 25, 'm':24, 'd':50, 'h':25, 'i':30, 's':30 }"
    type    : Object
    dynamic : true
    optdemo : false
    sample  : false

  flipboxAdjustLens :
    short   : Vertical shift of "lens" for flip modes
    long    : |
      An adjustment, in pixels to move the lens on the flipbox modes, *after* the calculation to find center.

      Sometimes, external themes don't play nicely and you'll need a few pixels either way - in particular, 
      the default bootstrap4 theme needs 5 pixels positive (hardcoded), while most of the 3rd party color themes
      for bootstrap4 do not require any movement (set it to zero).
    modes   : 
      - flipbox
      - timeflipbox
      - datetimeflipbox
      - durationflipbox
    cat     : Display-Control
    default : false
    type    : Integer
    dynamic : true
    optdemo : false
    sample  : false

  flipSizeOverride :
    short   : Override the size of the flip elements for calculations.
    long    : |
      Some frameworks do not play nicely with the DOM (jQM, I'm looking at you), and the calculation
      to get how tall each of the flipbox items are returns a value not even close to reality.  This
      allows you to override that number so that dragging the roller tracks as expected. 
    modes   : 
      - flipbox
      - timeflipbox
      - datetimeflipbox
      - durationflipbox
    cat     : Display-Control
    default : false
    type    : Integer
    dynamic : false
    optdemo : false
    sample  : false

  fboxNatural :
    short   : Use "natural" sort for flipbox
    long    : |
      Natural sort is the backwards one. Sliding the roller down adds to the control, up subtracts.

      Natural sort makes a good bit of sense for duration modes, less so for dates, but it's very much
      a personal preference.

      The default is the string "default" - which will turn it on for duration, off for everything
      else.  Setting to __true__ will force it on, __false__ will force it off.
    modes   : 
      - flipbox
      - timeflipbox
      - datetimeflipbox
      - durationflipbox
    cat     : Display-Control
    default : "default"
    type    : String | Boolean
    dynamic : true
    optdemo : true
    sample  : "[ \"default\" | true | false ]"

  headerFollowsLabel :
    short   : Widget header follows the HTML label text
    long    : |
      When true, allow the widget header to be replaced by the label text.  Precedence is

       * options.overrideDialogLabel
       * &lt;input> placeholder attr (_headerFollowsPlaceholder_)
       * &lt;input> title attr (_headerFollowsTitle_)
       * &lt;label> text (with proper __for__ attr) (_headerFollowsLabel_)
       * i18n.titleDateDialogLabel / i18n.titleTimeDialogLabel (mode dependant)
    modes   : *modeAll
    cat     : Display-Control
    default : true
    type    : Boolean
    dynamic : false
    optdemo : false
    sample  : false

  headerFollowsPlaceholder :
    short   : Widget header follows the INPUT placeholder text
    long    : |
      When true, allow the widget header to be replaced by the placeholder attribute.  Precedence is

       * options.overrideDialogLabel
       * &lt;input> placeholder attr (_headerFollowsPlaceholder_)
       * &lt;input> title attr (_headerFollowsTitle_)
       * &lt;label> text (with proper __for__ attr) (_headerFollowsLabel_)
       * i18n.titleDateDialogLabel / i18n.titleTimeDialogLabel (mode dependant)
    modes   : *modeAll
    cat     : Display-Control
    default : true
    type    : Boolean
    dynamic : false
    optdemo : false
    sample  : false

  headerFollowsTitle :
    short   : Widget header follows the INPUT title text
    long    : |
      When true, allow the widget header to be replaced by the title attribute.  Precedence is

       * options.overrideDialogLabel
       * &lt;input> placeholder attr (_headerFollowsPlaceholder_)
       * &lt;input> title attr (_headerFollowsTitle_)
       * &lt;label> text (with proper __for__ attr) (_headerFollowsLabel_)
       * i18n.titleDateDialogLabel / i18n.titleTimeDialogLabel (mode dependant)
    modes   : *modeAll
    cat     : Display-Control
    default : true
    type    : Boolean
    dynamic : false
    optdemo : false
    sample  : false

  headerFormat :
    short   : Format for header
    long    : |
      The header is displayed inside the control, just above the adjustment controls.

      For more information on date format variables, see the _Output Formats_ section of the documentation
    modes   :
      - datebox
      - datetimebox
      - flipbox
      - datetimeflipbox
      - slidebox
    cat     : i18n
    default : "%A, %B %-d, %Y"
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideHeaderFormat
    optdemo : false
    sample  : false

  hideInput :
    short   : Hide the Input Element
    long    : |
      Cause the original input to be hidden on the page. (Including the lable if possible)

      Works with inline, blind and modal.  Unpredictable on dropdown display.
    modes   : *modeAll
    cat     : Display-Form
    default : false
    type    : Boolean
    dynamic : false
    optdemo : false
    sample  : false

  highDatesAlt :
    short   : Dates to highlight (alternate)
    long    : |
      An alternate list of dates to highlight with ___theme.cal_DateHighAlt___

      ##### Example
      ```js 
      // December 2000 Holiday Seson
      ["2001-01-01", "2000-12-31", "2000-12-25", "2000-12-24"]
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[\"2001-01-01\", \"2000-12-31\", \"2000-12-25\", \"2000-12-24\"]"

  highDates :
    short   : Dates to highlight
    long    : |
      An list of dates to highlight with ___theme.cal_DateHigh___

      ##### Example
      ```js 
      // December 2000 Holiday Seson
      ["2001-01-01", "2000-12-31", "2000-12-25", "2000-12-24"]
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[\"2001-01-01\", \"2000-12-31\", \"2000-12-25\", \"2000-12-24\"]"

  highDatesRec :
    short   : Dates to highlight - recurring
    long    : |
      A list of recurring dates to highlight with ___theme.cal_DateHighRec___

      Each date element is an array of the format

      ```js
      [<year>, <month>, <date>]
      ```

      * *year* : 4 digit year
      * *month* : 0 based month, (0 = January ... 11= December )
      * *date* : date

      Additionally, using "-1" as an element treats it as a wildcard, that is "every year/month/day"

      ##### Example

      ```js
      // (Chrismas, Christmas Eve, New Years Eve, and New Years Day, Every Year)
      [ [-1,0,1], [-1,11,31], [-1,11,25], [-1,11,24] ]
      ```
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ [-1,0,1], [-1,11,31], [-1,11,25], [-1,11,24] ]"

  highDatesPeriod :
    short   : Dates to highlight - periodic
    long    : |
      A list of periodic dates to highlight with ___theme.cal_DateHighRec___

      Takes an array of the format

      ```js
      [<start date>, <period>]
      ```

      * *date* : ISO-8601 start date
      * *period* : integer, i.e 7 (weekly), 14 (bi-monthly)

      ##### Example

      ```js
      // (Every other wednesday)
      [ "2019-09-11", 14 ]
      ```
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ \"2019-09-11\", 14 ]"

  highDays :
    short   : Highlight these days
    long    : |
      A list (array) of days of the week that are to be highlighted with ___theme.cal_DayHigh___.

      Zero based ( 0 = Sunday ... 6 = Saturday )

      ##### Example
      ```js
      // Weekends
      [ 0, 6 ]
      ```
    modes   :
      - calbox
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ 0, 6 ]"

  iconFactory :
    short   : Provide an icon factory to override internal icons
    long    : |
      This provides an convient way to override the built in icons.  It recieves a single argument, 
      which it the value of the icon portion of the theme setting.

      ##### Example - FontAwesome
      ```js
      iconFactory : function ( icnName ) {
        return "<i class=\"fa fa-" + icnName + "\"></i>";
      }
      ```
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : Function
    dynamic : true
    optdemo : false
    sample  : false

  isRTL :
    short   : Language runs Right-to-Left
    long    : |
      This does not get tested as well as it should. Please, if you are
      a native speaker of any of the languages that use this flag, give the
      maintainer / author a shout about all of the places he forgot to check 
      this flag and reorder the display.  Or maybe all the places where he did
      and it makes no sense to do it.
    modes   : *modeAll
    cat     : i18n
    default : false
    type    : Boolean
    dynamic : true
    i18n : *i18n
    overrideName : overrideIsRTL
    optdemo : false
    sample  : false

  linkedFieldFormat :
    short   : The format to use with linkedField
    long    : |
      This can be any valid format string that ___linkedField___ will be populated with. The
      default value is the format that .toJSON() returns. 

      note: this default format includes a 'Z' - it stands for "Zulu Time", a.k.a. "GMT", a.k.a. "UTC" - it
      is the single instance of DateBox doing any time zone processing, it *does* translate the date and
      time to GMT.  PHP only mostly understands ISO-8601, other languages do better.  Backend node.js
      would be very happy with this format.  That said, if you have not otherwise handled time zones in 
      your application, please, please, please do not use the default setting. Note also this is relying on 
      the useragent to have a correctly implemented toJSON - which should be there, but...
    modes   : *modeAll
    cat     : Callback
    default : "%J"
    type    : String
    dynamic : true
    optdemo : false
    sample  : false

  linkedField :
    short   : The jQuery selector for the output linked field(s)
    long    : |
      This is a jQuery selector of the field(s) that you want to fill with the selected date
      when chosen.  Uses ___linkedFieldFormat___ as the format.  Often used with a hidden
      form element to simplify backend date processing.

      Alternativle, it can be passed an object of multiple fields, in the form of:
      
      [ { id: "#someInput", format: "someFormat" }, ... ]
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : String | Object
    dynamic : true
    optdemo : false
    sample  : false

  lockInput :
    short   : Lock the original input element from manual input
    long    : Set the readonly property of the original input, allowing changes via the datebox contol only
    type    : Boolean
    modes   : *modeAll
    default : false
    dynamic : false
    cat     : Display-Form
    optdemo : false
    sample  : false

  meridiem :
    short   : Name of meridiems, if used
    long    : These are not used in most of the world. Either they never existed, or the country has since switched to 24 hour time.
    modes   : *modeTime
    cat     : i18n
    default : "[ 'AM', 'PM' ]"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideMeridiem
    optdemo : false
    sample  : false

  minDate :
    short   : Minimum date (HTML min attribute)
    long    : ISO string minimum date (YYYY-MM-DD) (Inclusive!)
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : String
    dynamic : true
    optdemo : true
    sample  : false

  maxDate :
    short   : Maximum date (HTML max attribute)
    long    : ISO string maximum date (YYYY-MM-DD) (Inclusive!)
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : String
    dynamic : true
    optdemo : true
    sample  : false

  minDays :
    short   : Min number of days past today
    long    : |
      Only accept dates that are today - # of days in the future (min).

      Both options will accept negative numbers:

      ```js
      minDays = 10
      maxDays = -5
      ```

      This would allow only days that are 5 to 10 days in the past to be chosen.
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  maxDays :
    short   : Max number of days past today
    long    : |
      Only accept dates that are today + # of days in the future (max)

      Both options will accept negative numbers:

      ```js
      minDays = 10
      maxDays = -5
      ```

      This would allow only days that are 5 to 10 days in the past to be chosen.
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  minDur :
    short   : Min duration
    long    : Do not allow durations less (min) or greater (max) than this to be selected.
    modes   :
      - durationbox
      - durationflipbox
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  maxDur :
    short   : Max duration
    long    : Do not allow durations less (min) or greater (max) than this to be selected.
    modes   :
      - durationbox
      - durationflipbox
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  minHour :
    short   : Min hour
    long    : Allow only hours before (min) or after (max) this to be selected.
    modes   : *modeTime
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  maxHour :
    short   : Max hour
    long    : Allow only hours before (min) or after (max) this to be selected.
    modes   : *modeTime
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  minTime :
    short   : Min time
    long    : |
      Allow only times before (min) or after (max) this to be selected. Format is 24hr clock - i.e. 18:31

      Note: this limits date selection to TODAY (datetime modes).
    modes   : *modeTime
    cat     : Limits
    default : false
    type    : String
    dynamic : true
    optdemo : true
    sample  : false

  maxTime :
    short   : Max time
    long    : |
      Allow only times before (min) or after (max) this to be selected. Format is 24hr clock - i.e. 18:31

      Note: this limits date selection to TODAY (datetime modes).
    modes   : *modeTime
    cat     : Limits
    default : false
    type    : String
    dynamic : true
    optdemo : true
    sample  : false

  minYear :
    short   : Min Year
    long    : Do not allow years before (min) or after (max) this one to be selected.
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  maxYear :
    short   : Max Year
    long    : Do not allow years before (min) or after (max) this one to be selected.
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  minuteStep :
    short   : Stepper for minutes
    long    : |
      Step the minute control by this amount.  Common values are 5, 10, 15, or 30.
    modes   : *modeTime
    cat     : Operation
    default : 1
    type    : Integer
    dynamic : true
    optdemo : true
    sample  : false

  minuteStepRound :
    short   : Direction to round
    long    : |
      Control rounding of minutes when an invalid minute is entered. 
      That is, minuteStep=5 and you enter 3 direct to the element

       - __-1__ : Down
       - __1__ : Up
       - __0__ : "Standard Rounding"
    modes   : *modeTime
    cat     : Operation
    default : 0
    type    : Integer
    dynamic : true
    optdemo : false
    sample  : false

  mode :
    short   : Mode of operations
    long    : |
      The mode of operation - see list of available modes below.

       * datebox
           * Control allows input of date using multiple inputs with +/- buttons
       * timebox
           * Control allows input of time using multiple inputs with +/- buttons
       * datetimebox
           * Control allows input of date & time using multiple inputs with +/- buttons
       * calbox
           * Control allows input of date using a calendar grid
       * flipbox
           * Control allows input of date using draggable columns
       * timeflipbox
           * Control allows input of time using draggable columns
       * datetimeflipbox
           * Control allows input of date & time using draggable columns
       * slidebox
           * Control allows input of date using draggable rows
       * durationbox
           * Control allows input of duration using multiple inputs with +/- buttons
       * durationflipbox
           * Control allows input of duration using draggable columns
    type    : String
    modes   : *modeAll
    default: none
    dynamic: true
    cat     : Display-Control
    optdemo : false
    sample  : false

  monthsOfYear :
    short   : Months of the year
    long    : List of the months of the year, zero based, full text
    modes   : *modeDate
    cat     : i18n
    default : "['January' ... 'December']"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideMonthsOfYear
    optdemo : false
    sample  : false

  monthsOfYearShort :
    short   : Abbreviated months of the year
    long    : |
      When using short months as output (and input), make sure that there are 12 unique short names.
      If you use too shot of an abbreviation (ex. Ju = June, Ju = July), not only is your outputted 
      date ambiguous to the user, it also cannot be reliably re-read by DateBox.
    modes   : *modeDate
    cat     : i18n
    default : "['Jan' ... 'Dec']"
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideMonthsOfYearShort
    optdemo : false
    sample  : false

  nextMonth / prevMonth :
    short   : Mouseover tooltip for next / prev month button
    long    : Tooltip (title) for next and previous buttons. Usually "Next Month" or similar.
    modes   :
      - calbox
    cat     : i18n
    default : "Next Month | Prev Month"
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideNextMonth | overridePrevMonth
    optdemo : false
    sample  : false

  notToday :
    short   : Invalidate today's date
    long    : |
      Allows those dates that are not the true value of the client's today
      (new Date(); at widget open) to be selected.

      Note: if used with time only modes, this will break them.
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Boolean
    dynamic : true
    optdemo : true
    sample  : false

  openCallback :
    short   : Callback function to run on control open
    long    : |
      Option can be a function, or, a string reference to a function in the window object.
      
      Additionally, if this returns false, the DateBox control will immediatally close.

      The first argument to the function will be an object containing: 
      
       - __date__ : The JavaScript date object of the current (chosen) date - Always defined, even if meaningless.
       - __initDate__ : The JavaScript date object that holds the widget creation time/date. Always defined.
       - __duration__ : The last entered duration, in seconds for duration modes - undefined if not.
       - __cancelClose__ : [Close only] - If the close action was triggered by a user cancel (true), or by setting the date (false)


      For more information, please see the _Callbacks and Listeners_ section of the documentation.
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : Function
    dynamic : true
    optdemo : false
    sample  : false

  openCallbackArgs :
    short   : Extra arguments to pass to open callback.
    long    : |
      Note that 'this' in your function is the widget.
      
      argument[0] is a return value object, this starts on argument[1]

      For more information, please see the _Callbacks and Listeners_ section of the documentation.
    modes   : *modeAll
    cat     : Callback
    default : "[]"
    type    : Array
    dynamic : true
    optdemo : false
    sample  : false

  rolloverMode :
    short   : Allow rollover of each date element
    long    : |
      Allow rollover on a per-element basis.  i.e. - December + 1 = January of next year
    modes   :
      - datebox
      - timebox
      - datetimebox
      - flipbox
      - timeflipbox
      - datetimeflipbox
      - slidebox
    cat     : Operation
    default : "{ 'm': true, 'd': true, 'h': true, 'i': true, 's': true }"
    type    : Object
    dynamic : true
    optdemo : false
    sample  : false

  runOnBlurCallback :
    short   : Callback function to run on original input box change
    long    : |
      This option can only be supplied as a function.  It will recieve an object containing:

       * oldDate - the Date that existed prior to the control closing.  The __internal__ date
       * origDate - last confirmed, good, user set date. Does not reflect changes in the control prior to a set button being clicked.
       * newDate - should the input be re-read, this is the date the control thinks it is.
       * isGood - the input was be succesfully processed
       * isBad - the input was NOT be succesfully processed
       * input - Value of the input

      The function return either:

       * A new date OBJECT to set the control today.

      __OR__

       * false ( in fact, anything other than an object), meaning that the date is fine - and DateBox should use the value of newDate instead.

      Sample:

      ```js
      function( obj ) {
        if ( obj.isGood ) {
          // Good date parsed, do nothing.
          return false;
        }

        var newd = chrono.parseDate(obj.input);

        if ( newd === null ) {
          return new Date();
        } else {
          return newd;
        }
      }
      ```

      For more information, please see the _Callbacks and Listeners_ section of the documentation.
    modes   : *modeAll
    cat     : Callback
    default : false
    type    : Function
    dynamic : true
    optdemo : false
    sample  : false

  safeEdit :
    short   : Edit input safely
    long    : |
      It'd be a bad idea to turn this off.  With it off, unreadable dates will set the internal
      date to "today", but will not update the input.

      runOnBlurCallback ignores (bypasses) this option.  It won't do both.

      The only reason to shut this down would be on legacy code where you are doing this yourself
      somehow.
    modes   : *modeAll
    cat     : Operation
    default : true
    type    : boolean
    dynamic : true
    optdemo : false
    sample  : false

  setDateButtonLabel :
    short   : "'Set Date' Button Label"
    long    : Text only, usaully "Set Date"
    modes   : *modeDate
    cat     : i18n
    default : Set Date
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideSetDateButtonLabel
    optdemo : false
    sample  : false

  setDurationButtonLabel :
    short   : "'Set Duration' Button Label"
    long    : Text only, usually "Set Duration"
    modes   :
      - durationbox
      - durationflipbox
    cat     : i18n
    default : Set Duration
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideSetDurationButtonLabel
    optdemo : false
    sample  : false

  setTimeButtonLabel :
    short   : "'Set Time' Button Label"
    long    : Text only, usually "Set Time"
    modes   : *modeTime
    cat     : i18n
    default : Set Time
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideSetTimeButtonLabel
    optdemo : false
    sample  : false

  showInitialValue :
    short   : Auto-fill Input field
    long    : |
      Auto-fill the input on datebox initialization - this will take into account any default value options
    modes   : *modeAll
    cat     : Display-Form
    default : false
    type    : Boolean
    dynamic : true
    optdemo : false
    sample  : false

  slen :
    short   : Length of sliders
    long    : |
      This is half the number of elements in the slide roller, minus one (the centered element).
    modes   :
      - slidebox
    cat     : Operation
    default : "{'y': 5, 'm': 6, 'd': 15, 'h': 12, 'i': 30 }"
    type    : Object
    dynamic : true
    optdemo : false
    sample  : false

  slideHighToday :
    short   : Highlight today's date
    long    : |
      Highlight today's date with the theme in ___theme\_slide_Today___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - slidebox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false

  slideHighPick :
    short   : Highlight currently selected date
    long    : |
      Highlight the currently selected date with the theme in ___theme\_slide_Selected___

      For more information on the themeing system, please see the _Themeing_ section of the documentation

      Precedence:
       * OutOfBounds
       * Selected
       * Today
       * highDates
       * highDatesAlt
       * highDatesRec
       * highDays
       * default
    type    : Boolean
    modes   :
      - slidebox
    default : true
    dynamic : true
    cat     : Theme
    optdemo : true
    sample  : false
  
  slideUsePickers :
    short   : Show month and year select boxes
    long    : |
      Show a month and year select box above the slide grid.  Often used with ___slideNoHeader___
    type    : Boolean
    modes   :
      - slidebox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  slideNoHeader :
    short   : Suppress standard control header
    long    : |
      This option allows hiding of the standard calendar header (Month & Year, Previous / Next Buttons)

      It is particularly useful when you want to replace it with ___slideUsePickers___
    type    : Boolean
    modes   :
      - slidebox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false
  
  slideYearPickMin :
    short   : Year picker upper limit
    long    : |
      This is the upper limit for the year select box.

      Special cases:
       * __Integer > 1,800__ : Hard coded year
       * __Integer < 1,800__ : Number of years from current year or current selection.
       * __String "NOW"__ : Today's year

      See also: ___calYearPickRelative___
    type    : Integer || String
    modes   :
      - slidebox
    default : 6
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  slideYearPickMax :
    short   : Year picker lower limit
    long    : |
      This is the lower limit for the year select box.

      Special cases:
       * __Integer > 1,800__ : Hard coded year
       * __Integer < 1,800__ : Number of years from current year or current selection.
       * __String "NOW"__ : Today's year

      See also: ___calYearPickRelative___
    type    : Integer || String
    modes   :
      - slidebox
    default : -6
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  slideYearPickRelative :
    short   : Year picker relativity switch
    long    : |
      When true, the year picker min/max are relative to the currently visible date

      When false, the year picker min/max are relative to today's year
    type    : Boolean
    modes   :
      - slidebox
    default : true
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  slideDateList :
    short   : List of dates for special pick list
    long    : |
      List of 2-element arrays to show in a special pick list. Used with ___slideShowDateList___.

      The inner array structure is:

      ```js
      [ISO-Date, Description]
      ```

      ##### Example

      ```js
      [ ["1980-04-25", "JT's Date of Birth"], ["1809-02-12", "Lincoln's Birthday"] ]
      ```
    type    : Array
    modes   :
      - slidebox
    default : false
    dynamic : true
    cat     : Limits
    optdemo : true
    sample  : "[ [\"1980-04-25\", \"JT's Date of Birth\"], [\"1809-02-12\", \"Lincoln's Birthday\"] ]"

  slideShowDateList : 
    short   : Show special date picker
    long    : This is the on/off switch for the display of dates provided by ___slideDateList___
    type    : Boolean
    modes   :
      - slidebox
    default : false
    dynamic : true
    cat     : Display-Control
    optdemo : true
    sample  : false

  startOffsetDays/Months/Years :
    short   : Offset the start day / month / year
    long    : |
      Offset the start day by X number of days, months, or years

      This value will be added to 'defaultValue' if it is supplied
    modes   : *modeDate
    cat     : Operation
    default : false
    type    : Integer
    dynamic : false
    optdemo : false
    sample  : false

  theme_clearBtn :
    short   : Clear Button Theme
    long    : |
      Array of
       * Icon used on the clear button,
       * Theme class string added to the clear button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"eraser\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_closeBtn :
    short   : Close Button Theme
    long    : |
      Array of
       * Icon class used on the close button,
       * Theme class string added to the close button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"check\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_cancelBtn :
    short   : Cancel Button Theme
    long    : |
      Array of
       * Icon class used on the cancel button
       * Theme class string added to the cancel button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"times\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_tomorrowBtn :
    short   : Tomorrow Button Theme
    long    : |
      Array of
       * Icon class used on the tomorrow button
       * Theme class string added to the tomorrow button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"fast-forward\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_todayBtn :
    short   : Today Button Theme
    long    : | 
      Array of
       * Icon class used on the today button
       * Theme class string added to the today button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"step-forward\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_dropdownContainer :
    short   : Dropdown container class
    long    : Class string added to the datebox container when using the dropdown method
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "bg-light border border-dark mt-1"
    optdemo : true
    sample  : false

  theme_modalContainer :
    short   : Modal container class
    long    : Class string added to the datebox container when using the modal method
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "bg-light border border-dark p-2 m-0"
    optdemo : false
    sample  : false

  theme_inlineContainer :
    short   : Inline container class
    long    : Class string added to the datebox container when using the inline or blind method
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "bg-light border border-dark my-2"
    optdemo : false
    sample  : false

  theme_headerTheme :
    short   : Header Theme
    long    : Theme class added to the control header
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "bg-dark"
    optdemo : true
    sample  : false

  theme_headerBtn :
    short   : Header (Close) Button Theme
    long    : |
      Array of
       * Icon class used for the control header close button
       * Theme class added to the control header close button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"times\", \"outline-secondary\" ]"
    optdemo : true
    sample  : false

  theme_openButton  :
    short   : Open Button Theme
    long    : Theme class used for the open button
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : false
    default : "secondary"
    optdemo : false
    sample  : false

  theme_cal_Today :
    short   : Highlight for Today
    long    : Class used to highlight today's date when ___calHighToday___ is on
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-info"
    optdemo : true
    sample  : false

  theme_cal_DayHigh :
    short   : Highlight for highDays
    long    : Class used to highlight days in ___highDays___
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_cal_Selected :
    short   : Highlight for selected date
    long    : Class used to highlight selected date is ___calHighSelected___ is on
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-success"
    optdemo : true
    sample  : false

  theme_cal_DateHigh :
    short   : Highlight for highDates
    long    : Class used to highlight dates in ___highDates___
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_cal_DateHighAlt :
    short   : Highlight for highDatesAlt
    long    : Class used to highlight dates in ___highDatesAlt___
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-danger"
    optdemo : true
    sample  : false

  theme_cal_DateHighRec :
    short   : Highlight for highDatesRec
    long    : Class used to highlight dates in ___highDatesRec___
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_cal_Default :
    short   : Default class
    long    : Class used by default on all dates, unless another is more appropriate
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-primary"
    optdemo : true
    sample  : false

  theme_cal_OutOfBounds :
    short   : Highlight for Underrun / Overrun Dates
    long    : Class used to highlight (or lowlight) those dates outside of the currently dispalyed month, if ___calOnlyMonth___ is off
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-secondary border-0"
    optdemo : true
    sample  : false

  theme_cal_NextBtn :
    short   : Next Month Button Theme (calbox)
    long    : |
      Array of
       * Icon class used for next month button
       * Theme class added to the next month button
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"plus\", \"outline-dark\" ]"
    optdemo : true
    sample  : false

  theme_cal_PrevBtn :
    short   : Previous Month Button Theme (calbox)
    long    : |
      Array of
       * Icon class used for previous month button
       * Theme class added to the previous month button
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"minus\", \"outline-dark\" ]"
    optdemo : true
    sample  : false

  theme_cal_Pickers  :
    short   : CalBox Pickers theme
    long    : Theme class added to the calbox pickers (jQM only)
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : false
    optdemo : true
    sample  : false

  theme_cal_DateList :
    short   : CalBox DateList theme
    long    : Theme class added to the calbox datelist (jQM only)
    modes   :
      - calbox
    cat     : Theme
    type    : String
    dynamic : true
    default : false
    optdemo : true
    sample  : false

  theme_dbox_NextBtn :
    short   : Next Button Theme (datebox)
    long    : |
      Array of
       * Icon class used for the next button
       * Theme class added to the next button
    modes   :
      - datebox
      - timebox
      - datetimebox
      - durationbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"plus\", \"outline-dark\" ]"
    optdemo : true
    sample  : false

  theme_dbox_PrevBtn :
    short   : Previous Button Theme (datebox)
    long    : |
      Array of
       * Icon class used for the previous button
       * Theme class added to the previous button
    modes   :
      - datebox
      - timebox
      - datetimebox
      - durationbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "[ \"minus\", \"outline-dark\" ]"
    optdemo : true
    sample  : false

  theme_dbox_Inputs :
    short   : DateBox mode inputs
    long    : Theme class added to the datebox inputs.  Applicable to jQM only.
    modes   :
      - datebox
      - timebox
      - datetimebox
      - durationbox
    cat     : Theme
    type    : String
    dynamic : true
    default : false
    optdemo : true
    sample  : false

  theme_fbox_Selected :
    short   : Selected Date theme
    long    : Theme class added to the selected date
    modes   :
      - flipbox
      - timeflipbox
      - datetimeflipbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "success"
    optdemo : true
    sample  : false

  theme_fbox_Default : 
    short   : Default Date theme
    long    : Theme class added to all dates (unless something else applys)
    modes   :
      - flipbox
      - timeflipbox
      - datetimeflipbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "light"
    optdemo : true
    sample  : false

  theme_fbox_Forbidden : 
    short   : Invalid Date theme
    long    : Theme class added to the invalid dates
    modes   :
      - flipbox
      - timeflipbox
      - datetimeflipbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "danger"
    optdemo : true
    sample  : false

  theme_fbox_RollHeight : 
    short   : Roller view height
    long    : Height of the roller element in the control
    modes   :
      - flipbox
      - timeflipbox
      - datetimeflipbox
    cat     : Theme
    type    : String
    dynamic : true
    default : "135px"
    optdemo : true
    sample  : false

  theme_slide_Today :
    short   : Highlight for Today
    long    : Class used to highlight today's date when ___slideHighToday___ is on
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-info"
    optdemo : true
    sample  : false

  theme_slide_DayHigh :
    short   : Highlight for highDays
    long    : Class used to highlight days in ___highDays___
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_slide_Selected :
    short   : Highlight for selected date
    long    : Class used to highlight selected date is ___slideHighSelected___ is on
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-success"
    optdemo : true
    sample  : false

  theme_slide_DateHigh :
    short   : Highlight for highDates
    long    : Class used to highlight dates in ___highDates___
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_slide_DateHighAlt :
    short   : Highlight for highDatesAlt
    long    : Class used to highlight dates in ___highDatesAlt___
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-danger"
    optdemo : true
    sample  : false

  theme_slide_DateHighRec :
    short   : Highlight for highDatesRec
    long    : Class used to highlight dates in ___highDatesRec___
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-warning"
    optdemo : true
    sample  : false

  theme_slide_Default :
    short   : Default class
    long    : Class used by default on all dates, unless another is more appropriate
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : "outline-primary"
    optdemo : true
    sample  : false

  theme_slide_NextBtn :
    short   : Next Month Button Theme (slidebox)
    long    : |
      Array of
       * Icon class used for next month button
       * Theme class added to the next month button
    modes   :
      - slide
    cat     : Theme
    type    : String
    dynamic : true
    optdemo : true
    sample  : false
    default : "[ \"plus\", \"outline-dark border-0\" ]"

  theme_slide_PrevBtn :
    short   : Previous Month Button Theme (slidebox)
    long    : |
      Array of
       * Icon class used for previous month button
       * Theme class added to the previous month button
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    optdemo : true
    sample  : false
    default : "[ \"minus\", \"outline-dark border-0\" ]"

  theme_slide_NextDateBtn :
    short   : Next Week Button Theme (slidebox)
    long    : |
      Array of
       * Icon class used for next week button
       * Theme class added to the next week button
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    optdemo : true
    sample  : false
    default : "[ \"next\", \"outline-dark border-0\" ]"

  theme_slide_PrevDateBtn :
    short   : Previous Week Button Theme (slidebox)
    long    : |
      Array of
       * Icon class used for previous week button
       * Theme class added to the previous week button
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    optdemo : true
    sample  : false
    default : "[ \"prev\", \"outline-dark border-0\" ]"

  theme_slide_Pickers  :
    short   : SlideBox Pickers theme
    long    : Theme class added to the slidebox pickers (jQM only)
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : false
    optdemo : true
    sample  : false

  theme_slide_DateList :
    short   : SlideBox DateList theme
    long    : Theme class added to the slidebox datelist (jQM only)
    modes   :
      - slidebox
    cat     : Theme
    type    : String
    dynamic : true
    default : false
    optdemo : true
    sample  : false

  theme_backgroundMask :
    short   : Modal and Dropdown background mask
    long    : CSS style string used for the modal and dropdown method displays.
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : true
    default : "{ position: 'fixed', left: 0, top: 0, right: 0, bottom: 0, backgroundColor: 'rgba(0,0,0,.4)' }"
    optdemo : false
    sample  : false

  theme_headStyle :
    short   : Extra style info to inject in document header
    long    : Some frameworks require some extra styles.  This helps move away from a largely depreciated CSS file
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : false
    default : false
    optdemo : false
    sample  : false

  theme_spanStyle :
    short   : Extra style info to inject into the control span.
    long    : Some frameworks require some extra styles.  This helps move away from a largely depreciated CSS file
    modes   : *modeAll
    cat     : Theme
    type    : String
    dynamic : false
    default : false
    optdemo : false
    sample  : false

  timeFieldOrder :
    short   : Field order for time entry
    long    : |
      Typically this is the array [ "h", "i", "a" ] or [ "h", "i" ]

      Fields:

       - __h__ : Hours
       - __i__ : Minutes
       - __a__ : Meridiem
    modes   : *modeTime
    cat     : i18n
    default : array('h', 'i', 'a']
    type    : Array
    dynamic : true
    i18n : *i18n
    overrideName : overrideTimeFieldOrder
    optdemo : false
    sample  : false

  timeFormat :
    short   : Clock Format (12/24h)
    long    : |
      Valid options are 12 and 24.  This controls what is seen and used for the input controls, 
      not the output format.  To change the output format of the time, please see ___timeOutput___.
    modes   : *modeTime
    cat     : i18n
    default : 24
    type    : Integer
    dynamic : true
    i18n : *i18n
    overrideName : overrideTimeFormat
    optdemo : false
    sample  : false

  timeOutput :
    short   : Format for returned time
    modes   : *modeTime
    cat     : i18n
    default : "%k:%M"
    type    : String
    dynamic : true
    long    : For more information on date format variables, see the _Date Formats_ documentation section.
    i18n : *i18n
    overrideName : overrideTimeOutput
    optdemo : false
    sample  : false

  titleDateDialogLabel :
    short   : Date mode's fallback header label
    long    : Fall-back when there is no associated label element
    modes   : *modeDate
    cat     : i18n
    default : Set Date
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideTitleDateDialogLabel
    optdemo : false
    sample  : false

  titleTimeDialogLabel :
    short   : Time mode's fallback header label
    long    : Fall-back when there is no associated label element
    modes   : *modeTime
    cat     : i18n
    default : Set Time
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideTitleTimeDialogLabel
    optdemo : false
    sample  : false

  todayButtonLabel :
    short   : "'Jump to today' button Label"
    long    : This began life as a CalBox only option, and still retains that name. However, it is used in all modes now.
    modes   : *modeDate
    cat     : i18n
    default : Jump to Today
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideTodayButtonLabel
    optdemo : false
    sample  : false

  tomorrowButtonLabel :
    short   : "Text for 'tommorrow' button"
    long    : This began life as a CalBox only option, and still retains that name. However, it is used in all modes now.
    modes   : *modeDate
    cat     : i18n
    default : Jump to Tommorrow
    type    : String
    dynamic : true
    i18n : *i18n
    overrideName : overrideTomorrowButtonLabel
    optdemo : false
    sample  : false

  tooltip :
    short   : Mouseover tooltip for open button
    long    : Tooltip (title) for the open button on the original input
    modes   : *modeAll
    cat     : i18n
    default : Open Date Picker
    type    : String
    dynamic : false
    i18n : *i18n
    overrideName : overrideTooltip
    optdemo : false
    sample  : false

  twoDigitYearCutoff :
    short   : Where the cutoff between 19XX and 20XX happens
    long    : |
      This sets where the century change happens.  By default, it is 38, that is, 2 digit years before
      38 will be assumed to refer to 2000-2037, and years after will be assumed to refere to 1938-1999.

      If ___afterToday__ is true, all years are assumed to be 20XX. The same would be true if this 
      were set to 100+

      Obviously, this has no bearing if you do not force usage of 2 digit dates.
    modes   : *modeDate
    cat     : Operation
    default : 38
    type    : Integer
    dynamic : true
    optdemo : false
    sample  : false

  useArabicIndic :
    short   : Use Arabic/Indic numerals
    long    : This is the only other numeral system I've found in use on the web.
    modes   : *modeAll
    cat     : i18n
    default : false
    type    : Boolean
    dynamic : true
    i18n : *i18n
    overrideName : overrideUseArabicIndic
    optdemo : false
    sample  : false

  useButton :
    short   : Show a button in the Input Element to open the control
    modes   : *modeAll
    cat     : Display-Form
    default : true
    type    : Boolean
    dynamic : false
    long    : Display an open button inside or alongside the input element that will open the control
    optdemo : false
    sample  : false

  useCancelButton :
    short   : Show a button to cancel the Input control
    modes   : *modeAll
    cat     : Display-Control
    default : false
    type    : Boolean
    dynamic : true
    long    : The cancel button allows you the close the control without setting the date or time.
    optdemo : true
    sample  : false

  useClearButton :
    short   : Show a button to clear the Input
    modes   : *modeAll
    cat     : Display-Control
    default : false
    type    : Boolean
    dynamic : true
    long    : The clear button allows you the clear the original input.  It basically "unsets" the date/time
    optdemo : true
    sample  : false

  useCollapsedBut :
    short   : Single line of control buttons
    long    : Attempt to merge today, tomorrow, clear, close, and set buttons into a single line
    cat     : Display-Control
    modes   : *modeAll
    default : false
    type    : Boolean
    dynamic : true
    optdemo : true
    sample  : false

  useFocus :
    short   : Open the control when the Input Element is focused
    modes   : *modeAll
    cat     : Display-Form
    default : false
    type    : Boolean
    dynamic : false
    long    : Open datebox control when input element is focused (and disable button)
    optdemo : false
    sample  : false

  useHeader :
    short   : Use a toolbar header for the control
    modes   : *modeAll
    cat     : Display-Control
    default : true
    type    : Boolean
    dynamic : true
    long    : This refers to the header with the close button and the title.
    optdemo : true
    sample  : false

  useImmediate :
    short   : Update the Input Element on every control change
    modes   : *modeAll
    cat     : Operation
    default : false
    type    : Boolean
    dynamic : true
    long    : This is particularly useful with non-setting modes (datebox for instance) coupled with inline displays
    optdemo : false
    sample  : false

  useLang :
    short   : The current active langauge / locale
    modes   : *modeAll
    cat     : Display-Control
    default : default
    type    : String
    dynamic : true
    long    : |
      Selects the current active langauge.  If a language string is not found, it will fall back on the string in the
      "default" languge, or return "undefined" (as a String).
    optdemo : true
    sample  : "en-US"

  usePlaceholder :
    short   : Attempt to auto fill the placeholder text (or use the supplied custom text)
    modes   : *modeAll
    cat     : Display-Form
    default : false
    type    : Boolean | String
    dynamic : false
    long    : Auto-fill the placeholder text from the input element's label if set to true.  Or, set to a string and it will use that text to set the placeholder
    optdemo : false
    sample  : false

  useSetButton :
    short   : Show button to set the date
    modes   : *modeAll
    cat     : Display-Control
    default : true
    type    : Boolean
    dynamic : false
    long    : This button both sets the date, and closes the control.
    optdemo : true
    sample  : false

  useTodayButton :
    short   : Show button to jump to today
    modes   : *modeAll
    cat     : Display-Control
    default : false
    type    : Boolean
    dynamic : true
    long    : This button will "select" today, but it will not "set" today.  It is for quick navigation.
    optdemo : true
    sample  : false

  useTomorrowButton :
    short   : Show button to jump to tomorrow
    modes   : *modeAll
    cat     : Display-Control
    default : false
    type    : Boolean
    dynamic : true
    long    : This button will "select" tomorrow, but it will not "set" tomorrow.  It is for quick navigation.
    optdemo : true
    sample  : false

  validHours :
    short   : Limit times to only these hours
    long    : |
      Array of valid hours to choose (24hr based)


      ##### Example
      ```js
      // Standard working hours
      [ 9, 10, 11, 12, 13, 14, 15, 16, 17 ]
      ```
    modes   : *modeAll
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[ 9, 10, 11, 12, 13, 14, 15, 16, 17 ]"

  whiteDates :
    short   : Dates to always consider valid
    long    : |
      A list (array) of ISO-8601 _(YYYY-MM-DD)_ dates that are to be considered valid always.

      Processing order:
       * enableDates ( If used, the list is exclusive )
       * whiteDates ( Whitelisted dates will always pass )
       * All date limiters, in a pile-on fashion

      ##### Example
      ```js
      // Christmas and New Years, 2000/2001
      ["2001-01-01", "2000-12-31", "2000-12-25", "2000-12-24"]
      ```
    modes   : *modeDate
    cat     : Limits
    default : false
    type    : Array
    dynamic : true
    optdemo : true
    sample  : "[\"2001-01-01\", \"2000-12-31\", \"2000-12-25\", \"2000-12-24\"]"

  zindex :
    short   : Z-Index of controls
    modes   : *modeAll
    cat     : Display-Control
    default : 1100
    type    : Integer
    dynamic : false
    long    : The Zindex to use for the datebox control.  If applicable, there is a full-screen overlay behind the control at zIndex-1
    optdemo : false
    sample  : false
